// ---------------------------------------------
// Prisma Schema — WaterTrade
// ---------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Models ----------

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  name      String?
  role      Role    @default(USER)

  // Clerk (or other auth) external id
  clerkId   String? @unique

  // Relations
  listings            Listing[]
  buyerTransactions   Transaction[] @relation("BuyerTransactions")
  sellerTransactions  Transaction[] @relation("SellerTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
}

model Listing {
  id           String   @id @default(cuid())
  district     String
  waterType    String
  availability String          // e.g. "Feb–Apr 2025"
  acreFeet     Int
  pricePerAF   Int             // store in cents
  status       ListingStatus   @default(ACTIVE)

  // Seller relation (optional for seed/bootstrapping)
  seller     User?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId   String?

  // Optional auction settings
  isAuction      Boolean  @default(false)
  auctionEndsAt  DateTime?
  reservePrice   Int?            // per AF (cents)

  bids        Bid[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status, isAuction, auctionEndsAt])
  @@index([district, waterType])
}

model Bid {
  id         String   @id @default(cuid())

  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId  String

  bidder     User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId   String

  pricePerAF Int      // bid price per AF (cents)
  createdAt  DateTime @default(now())

  @@index([listingId, createdAt])
  @@index([bidderId, createdAt])
}

model Transaction {
  id          String             @id @default(cuid())
  type        TransactionType
  status      TransactionStatus  @default(INITIATED)

  listing     Listing    @relation(fields: [listingId], references: [id], onDelete: Restrict)
  listingId   String

  seller      User       @relation("SellerTransactions", fields: [sellerId], references: [id], onDelete: Restrict)
  sellerId    String

  buyer       User       @relation("BuyerTransactions", fields: [buyerId], references: [id], onDelete: Restrict)
  buyerId     String

  acreFeet    Int
  pricePerAF  Int        // cents
  totalAmount Int        // cents (acreFeet * pricePerAF)

  paymentMethod PaymentMethod?
  paymentId      String?     // Stripe PI id or Escrow.com id

  complianceApprovedBy String?
  complianceApprovedAt DateTime?

  signatures Signature[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
  @@index([listingId])
}

model Signature {
  id                 String       @id @default(cuid())

  transaction        Transaction  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId      String

  party              Party        // SELLER or BUYER
  docusignEnvelopeId String?
  status             SignatureStatus @default(PENDING)
  completedAt        DateTime?

  @@index([transactionId, party])
}

// ---------- Enums ----------

enum Role {
  USER
  ADMIN
}

enum Party {
  SELLER
  BUYER
}

enum ListingStatus {
  ACTIVE
  UNDER_CONTRACT
  SOLD
  ARCHIVED
}

enum TransactionType {
  BUY_NOW
  OFFER
  AUCTION
}

enum TransactionStatus {
  INITIATED
  PENDING_SELLER_SIGNATURE
  AWAITING_BUYER_PAYMENT
  PAYMENT_IN_REVIEW
  PENDING_BUYER_SIGNATURE
  COMPLIANCE_REVIEW
  APPROVED
  FUNDS_RELEASED
  CANCELLED
}

enum SignatureStatus {
  PENDING
  SENT
  COMPLETED
  DECLINED
}

enum PaymentMethod {
  STRIPE
  ESCROW_COM
}
